======================================== AULA 01
Iterar em uma lista:
	@foreach
 
Condição
	@if(condição) {}
	else {}
 
Comentários:
	Iniciados com @*
	Terminados com *@
 
 
Links:
	Colocar link diretamente na view não é uma boa prática, é melhor deixar o próprio Asp.Net MVC gerar o link.
		@Html.ActionLink("Texto do Link", "Action", "Controller")

	O helper Html.ActionLink fornece vários métodos para criar links:
		@Html.ActionLink("Texto do Link", "Action", "Controller", new { Parâmetros de rotas }, new { Atributos HTML })
	
	
Sessão do servidor:
	Fazemos isso através da variável @Session que é disponibilizada automaticamente na view.
		@Session["usuarioLogado"]
		@if(Session["usuarioLogado"] != null) 
		

Texto solto dentro de um bloco Razor
	Quando estamos dentro de um bloco Razor, esperasse código C# ou texto dentro de tags html, mas caso precise adicionar um texto basta usar @:
		@: Bem-Vindo
		
		
		
======================================== AULA 02
Layout Page:
	Para definirmos um layout comum para a aplicação, basta adicionar um novo arquivo na pasta ~/Views/Shared chamado _Layout.cshtml.
	Marcamos o lugar em que queremos colocar o código da view do controller com a função @RenderBody
	
	
Valores globais para views:
	Podemos criar um arquivo especial dentro do projeto chamado _ViewStart.cshtml dentro da pasta Views
	
	
Reaproveitar blocos HTML:
	Para que certas variáveis não precise ser processada em todas as vies/controller, por exemplo um Menu, poderia criar uma controller/view pra isso e reaproveitar o código HTML gerado.
		 @Html.Action("Index", "Menu")
	Neste caso é necessário setar a variável Layout como NULL na view.
	
	
	
======================================== AULA 03
Views parciais:
	Casos que queremos importar uma view sem executar nenhuma lógica de negócios. São arquivos cshtml comuns que devem ficar dentro da pasta ~/Views/Shared e seu nome deve iniciar com _
	Para importar a view parcial em outro arquivo, utiliza o helper:
		@Html.Partial("_MenuSuperior")
	
	
Seções do Razor:
	Quando precisamos utilizar um script em uma View e queremos renderizalos no final do body, podemos criar uma seção para todos os scripts no Layout:
		@RenderSection("Scripts")
	O que a view definir dentro da seção Scripts será colocado no lugar do @RenderSection.
	Com esse código estamos definindo uma seção obrigatória chamada Scripts, porém nem toda view precisa importar scripts adicionais:
		@RenderSection("Scripts", required: false)
	
	Agora basta definir na view em questão quais os scripts que ela utilizará:
	@section Scripts {	}
	
	
	
======================================== AULA 04	
Views Fortemente Tipadas:
	Quando trabalhamos com formulários é recomendado que os campos do formulário conheçam os atributos do Modelo, para isso definimos uma view tipada:
		@model LojaRazor.Models.Usuario
	
	
Iniciar Forms:	
	Começar um novo formulário com o HtmlHelper:
		@Html.BeginForm("Nome da Action", "Controller", FormMethod.Post)
	
	Para o Razor saber onde o código do formulário termina, utilizamos o bloco @using:
		@using(Html.BeginForm("Cadastra", "Usuarios", FormMethod.Post))
		{
		   @* código do formulário fica aqui *@
		}
	
	
Gerar Campos:
	O helper passa um lambda que recebe um argumento do tipo Usuario (tipo da view) e devolve qual é a propriedade que queremos utilizar:
		Label: @Html.LabelFor(u => u.Complemento, "Texto Label")
		TextBox: @Html.TextBoxFor(u => u.Nome)
		TextArea: @Html.TextAreaFor(u => u.Observacoes)
		Password: @Html.PasswordFor(u => u.Senha)
		CheckBox: @Html.CheckBoxFor(u => u.RecebePromocoes)
		RadioButton: @Html.RadioButtonFor(u => u.Sexo, LojaRazor.Models.Sexo.Masculino)
		DropDown: @Html.DropDownListFor(u => u.Estado, lista_de_estados)
	
	
	
======================================== AULA 05	
Internacionalização com arquivos de recurso do C# (Resource File):
	O resource file funciona como um dicionário que associa chaves a valores.
	Precisamos modificar a opção Access Modifier do editor de resursos de Internal para Public
	
	Quando queremos que a aplicação suporte diversos idiomas diferentes:
		Mensagens.<código do idioma>.resx
		Mensagens.en-us.resx
	
	
	
======================================== AULA 06	
Utilizando Bundling para melhorar o carregamento de recursos:
	Para utilizarmos a API de bundling, precisamos configurar o projeto dentro do arquivo App_Start/BundleConfig.cs
	Registrar um conjunto de arquivos css:
		Por convenção, a url é iniciada pelo prefixo ~/bundles/ seguido pelo nome desejado pela aplicação para os estilos da aplicação, utilizaríamos ~/bundles/estilos, por exemplo.		
			StyleBundle estilos = new StyleBundle("~/bundles/estilos");
			estilos.Include("~/Content/bootstrap/css/bootstrap.css");
			bundles.Add(estilos);
		
		Para importar na View:
			@Styles.Render("~/bundles/estilos")
	
	Registrar um conjunto de arquivos js:
		ScriptBundle scripts = new ScriptBundle("~/bundles/scripts");
		scripts.Include("~/Scripts/jquery-1.7.1.js");
		bundles.Add(scripts);
	
		Para importar na View:
			@Scripts.Render("~/bundles/scripts")
	
	Para ver funcionando, acesso o Web.Config, tag Compilation. No atributo debug para false, colocando a aplicação em modo release.